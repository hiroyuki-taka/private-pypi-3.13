name: build wheels
on:
  - push

jobs:
  # pyquadkey2(whl)
  build_pyquadkey2_wheels:
    name: Build pyquadkey2 on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-13
          - macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: muety/pyquadkey2
          ref: "0.3.2"
      - name: Build wheels
        env:
          CIBW_BUILD: cp313-* cp312-* cp311-* cp310-*
          CIBW_SKIP: pp* *-win32 *_i686
          CIBW_BEFORE_BUILD: >
            python -m pip install --upgrade pip
            && pip install -r requirements.txt
            && cd src/pyquadkey2/quadkey/tilesystem
            && python setup.py build_ext --inplace
        run: |
          pipx run cibuildwheel==2.22.0
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: pyquadkey2-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  # pyquadkey2(sdist)
  build_pyquadkey2_sdist:
    name: Build pyquadkey2 sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: muety/pyquadkey2
          ref: "0.3.2"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build sdist
        run: |
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: pyquadkey2-sdist
          path: ./dist/*.tar.gz

  # snowflake-connector-python(whl)
  build_snowflake_connector_python_wheels:
    name: Build snowflake-${{ matrix.os.id }}-py${{ matrix.python-version }}
    runs-on: ${{ matrix.os.image }}
    strategy:
      matrix:
        os:
          - image: ubuntu-20.04
            id: manylinux_x86_64
          - image: windows-2019
            id: win_amd64
          - image: macos-latest
            id: macosx_x86_64
          - image: macos-latest
            id: macosx_arm64
        python-version: ["3.12", "3.13"]
    steps:
      - name: Set shortver
        run: echo "shortver=${longver//./}" >> $GITHUB_ENV
        env:
          longver: ${{ matrix.python-version }}
        shell: bash
      - uses: actions/checkout@v4
        with:
          repository: snowflakedb/snowflake-connector-python
          ref: "v3.12.4"
      - name: Building wheel
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD: cp${{ env.shortver }}-${{ matrix.os.id }}
          MACOSX_DEPLOYMENT_TARGET: 10.14  # Should be kept in sync with ci/build_darwin.sh
        with:
          output-dir: dist
      - name: Show wheels generated
        run: ls -lh dist
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: snowflake-connector-python-wheels-${{ matrix.os.id }}_py${{ matrix.python-version }}
          path: dist/

  # snowflake-connector-python(sdist)
  build_snowflake_connector_python_sdist:
    name: Build snowflake-connector-python sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: snowflakedb/snowflake-connector-python
          ref: "v3.12.4"

      - name: Install dependencies
        run: |
          python -m pip install build

      - name: Build sdist
        run: |
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: snowflake-connector-python-sdist
          path: ./dist/*.tar.gz

  # black(whl)
  build_black_wheels:
    name: Build black-${{ matrix.os.id }}-py${{ matrix.python-version }}
    runs-on: ${{ matrix.os.image }}
    strategy:
      matrix:
        os:
          - image: ubuntu-20.04
            id: manylinux_x86_64
          - image: windows-2019
            id: win_amd64
#          - image: macos-latest
#            id: macosx_x86_64
          - image: macos-latest
            id: macosx_arm64
        python-version: ["3.12", "3.13"]
        version:
          - "23.12.1"
    steps:
      - name: Set shortver
        run: echo "shortver=${longver//./}" >> $GITHUB_ENV
        env:
          longver: ${{ matrix.python-version }}
        shell: bash
      - uses: actions/checkout@v4
        with:
          repository: psf/black
          ref: ${{ matrix.version }}
      - uses: actions/checkout@v4
        with:
          path: patcher
      - name: patch
        run: patch -i patcher/black-23.12.1.patch -p1
        shell: bash
      - name: Building wheel
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_BUILD: cp${{ env.shortver }}-${{ matrix.os.id }}
          MACOSX_DEPLOYMENT_TARGET: 10.14  # Should be kept in sync with ci/build_darwin.sh
        with:
          output-dir: dist
      - name: Show wheels generated
        run: ls -lh dist
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: black-wheels-${{ matrix.os.id }}_py${{ matrix.python-version }}
          path: dist/

  create_release:
    name: Create release page
    needs:
      - build_pyquadkey2_wheels
      - build_pyquadkey2_sdist
      - build_snowflake_connector_python_wheels
      - build_snowflake_connector_python_sdist
      - build_black_wheels
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: v${{ github.sha }}
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz

  create_pages:
    name: Create dumb-pypi
    needs:
      - build_pyquadkey2_wheels
      - build_pyquadkey2_sdist
      - build_snowflake_connector_python_wheels
      - build_snowflake_connector_python_sdist
      - build_black_wheels
    runs-on: ubuntu-latest

    environment:
      name: dumb-pypi
      url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      pages: write
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: create PyPI index
        run: |
          for file in dist/*; do
            echo -e "{\"filename\": \"$(basename $file)\", \"hash\": \"sha256=$(sha256sum $file | awk '{print $1}')\"}" >> package-list.json
          done
          cat package-list.json
          pipx run dumb-pypi --package-list-json package-list.json \
            --packages-url $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/v${{ github.sha }}/ \
            --output-dir data
      - uses: actions/upload-pages-artifact@v3
        with:
          path: data
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
